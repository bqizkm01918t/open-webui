name: 🔁 自动同步上游代码与镜像

on:
  schedule:
    - cron: '0 6 */1 * *'
  workflow_dispatch:

concurrency:
  group: sync-upstream
  cancel-in-progress: false

jobs:
  sync:
    name: 🔄 同步上游并保留工作流
    runs-on: ubuntu-latest

    env:
      UPSTREAM_REPO: "https://github.com/open-webui/open-webui.git "
      UPSTREAM_BRANCH: "main"
      MY_OWNER: "bqizkm01918t"
      MY_REPO: "open-webui"
      MY_BRANCH: "main"

      DOCKER_UPSTREAM_IMAGE: "ghcr.io/open-webui/open-webui:latest"
      DOCKER_MY_IMAGE: "ghcr.io/bqizkm01918t/open-webui:latest"

    steps:
      - name: 🪵 开始任务
        run: |
          echo "🚀 启动同步流程 (UTC: $(date --utc))"

      - name: 🔍 调试：打印环境变量
        run: |
          echo "🔍 当前用户: $MY_OWNER"
          echo "📦 仓库: $MY_REPO"
          echo "🔗 上游: $UPSTREAM_REPO"
          echo "🐳 镜像: $DOCKER_MY_IMAGE"

      - name: 🔽 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: 🌐 获取上游提交
        id: fetch_upstream
        run: |
          git config --global user.name "Auto Sync Bot"
          git config --global user.email "sync@github.com"

          git remote add upstream $UPSTREAM_REPO || true
          git fetch upstream || { echo "❌ 获取上游失败，请检查网络或 URL"; exit 1; }

          CURRENT=$(git rev-parse HEAD)
          LATEST=$(git rev-parse upstream/$UPSTREAM_BRANCH)

          echo "💾 当前: $CURRENT"
          echo "🆕 上游: $LATEST"

          if [ "$CURRENT" = "$LATEST" ]; then
            echo "🟢 已最新，跳过"
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
            exit 0
          else
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
            echo "CURRENT_COMMIT=$CURRENT" >> $GITHUB_ENV
          fi

      - name: 🔄 合并上游
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          git rebase upstream/$UPSTREAM_BRANCH
          echo "✅ 合并完成"

      - name: 🔑 恢复工作流文件
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          git checkout ${{ env.CURRENT_COMMIT }} -- .github/workflows/
          [ -f ".github/workflows/sync-upstream.yml" ] && echo "✅ 恢复成功" || { echo "❌ 恢复失败"; exit 1; }

      - name: 💾 提交更改
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          git add .
          git commit -m "🔄 Sync & preserve workflow" || echo "无变更"

      - name: 📤 推送更新（带详细错误）
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          REMOTE_URL="https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/$MY_OWNER/$MY_REPO.git"
          echo "📤 推送到: $REMOTE_URL"
          
          # 分步执行以便定位错误
          git remote set-url origin "$REMOTE_URL"
          git push origin $MY_BRANCH --force

          if [ $? -ne 0 ]; then
            echo "❌ Git 推送失败 (exit code 128)，可能原因："
            echo "   1. PAT_TOKEN 无效或权限不足（需 repo + write:packages）"
            echo "   2. 用户名拼写错误（当前: $MY_OWNER）"
            echo "   3. 仓库不存在或已被删除"
            echo "   4. Actions 权限未开启读写"
            echo "💡 请检查：https://github.com/ $MY_OWNER/$MY_REPO/settings/actions"
            exit 1
          fi
          echo "🎉 推送成功！"

      - name: 🐳 登录 GHCR
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          echo ${{ secrets.PAT_TOKEN }} | docker login ghcr.io -u $MY_OWNER --password-stdin
          [ $? -eq 0 ] && echo "✅ 登录成功" || { echo "❌ 登录失败"; exit 1; }

      - name: 🖼️ 同步 Docker 镜像
        if: ${{ env.UPDATE_NEEDED == 'true' }}
        run: |
          docker pull $DOCKER_UPSTREAM_IMAGE || { echo "❌ 拉取失败"; exit 1; }
          docker tag $DOCKER_UPSTREAM_IMAGE $DOCKER_MY_IMAGE
          docker push $DOCKER_MY_IMAGE || { echo "❌ 推送失败，请检查 write:packages 权限"; exit 1; }
          echo "✅ 镜像同步完成"

      - name: 📝 报告总结
        run: |
          echo "✅ 任务完成！下次见～"
